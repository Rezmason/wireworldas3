/*** Wireworld Player by Jeremy Sachs. June 22, 2010** Feel free to distribute the source, just try not to hand it off to some douchebag.* Keep this header here.** Please contact jeremysachs@rezmason.net prior to distributing modified versions of this class.*/package net.rezmason.wireworld {	//---------------------------------------	// IMPORT STATEMENTS	//---------------------------------------	import flash.display.Sprite;
	import flash.display.Stage;	public final class Main {				// This class's job is to decide on what Model to compile and to instantiate the MVC.				//---------------------------------------		// CONSTRUCTOR		//---------------------------------------		public function Main(stage:Stage, params:Object = null):void {						// Grab the Model determined by the compiler directive			BRAIN::STANDARD var model:IModel = 				new TDSIModel;						BRAIN::STUPID var model:IModel = 				new FirstModel; 		// STUPID			BRAIN::CONVOLUTION_FILTER var model:IModel = 	new FilterModel; 		// POOR			BRAIN::PIXEL_BENDER var model:IModel = 			new PixelBenderModel; 	// POOR			BRAIN::LINKED_LIST var model:IModel = 			new LinkedListModel; 	// GOOD			BRAIN::TDSI var model:IModel = 					new TDSIModel; 			// GREAT			BRAIN::AZOTH var model:IModel = 				new AzothModel;			// GREAT			BRAIN::BYTES var model:IModel = 				new ByteModel;			// OKAY			BRAIN::VECTOR var model:IModel = 				new VectorModel; 		// GOOD						BRAIN::TREE var model:IModel = 					new TreeModel; 			// PENDING			//BRAIN::TREE_TDSI var model:IModel = 			new TDSITreeModel;		// TODO						//BRAIN::HAXE var model:IModel = 					new HaXeModel;			// PENDING									// The BRAIN::ALL directive tells the compiler to include all these classes			// in the SWF, allowing them all to be checked by the Flex compiler for errors. 			BRAIN::ALL {				var model:IModel = new TDSIModel;				var models:Array = [				TDSIModel, 				FilterModel, 				PixelBenderModel, 				LinkedListModel, 				TDSIModel, 				VectorModel, 				TreeModel,				//TDSITreeModel,				//HaXeModel,				FirstModel,				ByteModel,				AzothModel,				];			} 						trace("Model type:", model);			var target:Sprite = new Sprite();			stage.addChild(target);						new Controller(model, new View(model, target), params);		}	}}