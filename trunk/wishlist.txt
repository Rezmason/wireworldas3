Improving render performance

	Idea: Would redrawing the paper to only fit in the window be any help?
	
	Another idea: fragmenting the graphics
		Rewrite the system for bringing graphics from the model
			IModel.makeFragment(rect:Rectangle, colorPalette)
				Returns a Shape containing wire, tail and head graphics layers
				Colored in correctly
			IModel.makeHeatFragment(rect:Rectangle)
				Returns a Shape containing heatmap graphics layer
		Cut up the wire/head/tail /heat data into fragments
			IModel.spewRects(fWidth:Number, fHeight:Number)
				Breaks non-dead area of BitmapData into rects and returns them
			Fragments that are entirely off-screen should not be in the display list
				Paper will manage its display list after
					zooming
					reset
					dragging

Rethink GUI entirely
	GUI elements should be Sprites
		Absorbs display list from a source
			SVG
			Text string
	They should make and handle themselves
		toggling
		button sets
		slider
		"picked" state
		class should have button sets listed, and their current option
		cursor
		dialog
		text
	Binding
		GUI elements should bind to a property on an object
		The View then evaluates those properties
		
Test on Mac and PC
Then Rip out debug stuff
function, var cleanup

Use latest TDSI

Use fcsh instead of mxmlc in build scripts
	fcshctl

Example gallery
	Controller
		Detect an example gallery XML file
		If the XML is loaded successfully, add the gallery button in the view
	
	The dialog is an accordion list of documents sorted by author and name
	Highlighting a file name enables the Load button

Dumb down the buttons to Sprites
Wise up the dialogs to class instances

WireworldAndroid
	Get it to build with AIR 2.5
	Run the APK maker on the resulting SWF
	Figure out two-finger "scrolling" and positioning
	Use the Android menu system instead of toolbars
	Tap to start, stop
	How do FileReference.browse() and FileReference.save() work on Android?
	Redesign dialogs for vertical mobile screen
	GPU acceleration
		
Try working with the tree model again