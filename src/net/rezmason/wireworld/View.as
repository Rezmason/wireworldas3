/*** Wireworld Player by Jeremy Sachs. June 22, 2010** Feel free to distribute the source, just try not to hand it off to some douchebag.* Keep this header here.** Please contact jeremysachs@rezmason.net prior to distributing modified versions of this class.*/package net.rezmason.wireworld {	//---------------------------------------	// IMPORT STATEMENTS	//---------------------------------------	//import __AS3__.vec.Vector;		//import apparat.math.FastMath;	//import apparat.math.IntMath;		import com.pixelbreaker.ui.osx.MacMouseWheel;		import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.system.Security;		import net.rezmason.gui.SimpleBridge;	import net.rezmason.gui.Toolbar;	import net.rezmason.gui.ToolbarAlign;	import net.rezmason.net.Syphon;		// This class is responsible for managing all visual assets and the display of all information.		internal final class View extends EventDispatcher implements IView {				//---------------------------------------		// CLASS CONSTANTS		//---------------------------------------				private static const CHANGE_STATE_EVENT:Event = new Event(WWCommand.CHANGE_STATE);		private static const OPAQUE_BACKGROUND_COLOR:int = 0x222222;		private static const READY_EVENT:WWEvent = new WWEvent(WWEvent.READY);		private static const RESOURCE_URL:String = "../lib/new_resources.swf";				//---------------------------------------		// PRIVATE VARIABLES		//---------------------------------------		private var _controller:Controller;		private var _model:IModel;		private var _scene:Sprite;				private var _callback:Function;				private var stage:Stage;		private var window:EventDispatcher;		private var _bridge:SimpleBridge;		private var _flag:int;				//---------------------------------------		// CONSTRUCTOR		//---------------------------------------		public function View(__model:IModel, __scene:Sprite, __bridge:SimpleBridge):void {					_scene = __scene;			_model = __model;			_bridge = __bridge;			_bridge.eventTypes.CHANGE_STATE ||= WWCommand.CHANGE_STATE;			buildAPI();						_scene.opaqueBackground = OPAQUE_BACKGROUND_COLOR;						// Syphon is a tool for loading a SWF and extracting its art.			if (Syphon.library.AboutBox) {				proceed();			} else {				Syphon.addEventListener(Event.COMPLETE, proceed);				Syphon.load(RESOURCE_URL);			}		}				//---------------------------------------		// GETTER / SETTERS		//---------------------------------------				// this callback is how the View propagates events to the Controller.		public function set callback(func:Function):void {			_callback = func;		}				public function get initialized():Boolean {			return stage != null;		}				//---------------------------------------		// PUBLIC METHODS		//---------------------------------------				public function addGUIEventListeners():void {					}				public function setFileName(__fileName:String):void {					}				public function showLoading():void {					}				// initializes the View		public function prime():void {			 		}				// wipes clean the elements of the View that are particular to the open document		public function resetView(event:Event = null):void {					}				// turns all toggles back to their default states		public function resetState(event:Event = null):void {					}				public function placeAnnouncer(event:Event = null):void {					}				public function updateAnnouncers():void {					}				public function showAbout(event:Event = null):void {					}				public function hideAbout(event:Event = null):void {					}				// Populates the alert box with a title, message, and maybe a close button		public function giveAlert(titleText:String, messageText:String, allowClose:Boolean = true):void {					}				public function hideAlert(event:Event = null):void {					}				// resizes the View when the stage has changed dimensions		public function resize(event:Event = null):void {					}				public function updatePaper(flags:int = 0):void {					}				public function updateGeneration(gen:uint):void {					}				public function updateFPS(__fps:int):void {					}				// Staples together a snapshot of the current Wireworld instance		// to a text field containing its description, stamped on a bitmap		public function snapshot():BitmapData {			return null;		}				// Disabler methods. This shows and hides a big dark transparent shape		// that goes behind modal dialogs to disable the rest of the GUI.				public function showDisabler(event:Event = null):void {					}				public function hideDisabler(event:Event = null):void {					}				//---------------------------------------		// PRIVATE METHODS		//---------------------------------------				// Instantiates GUI elements once the Syphon has loaded the asset SWF.		private function proceed(event:Event = null):void {						Syphon.removeEventListener(Event.COMPLETE, proceed);						// stuff						if (_scene.stage) {				connectToStage();			} else {				_scene.addEventListener(Event.ADDED_TO_STAGE, connectToStage);			}		}				// sets up the stage once it's available		private function connectToStage(event:Event = null):void {			_scene.removeEventListener(Event.ADDED_TO_STAGE, connectToStage);						stage = _scene.stage;						stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;						if (Security.sandboxType != "application") {				MacMouseWheel.setup(stage);			}						stage.addEventListener(Event.RESIZE, resize, false, 0, true);						if (stage.hasOwnProperty("nativeWindow")) {				window = stage["nativeWindow"] as EventDispatcher;			}						resize();			dispatchEvent(READY_EVENT);		}				// passing mouse wheel events to the Paper.		private function zoom(event:MouseEvent):void {					}				private function zoomIn(event:MouseEvent = null):void {			// 0.2		}				private function zoomOut(event:MouseEvent = null):void {			// -0.2		}				private function updateFlag():void {			_flag = 0;		}				private function yell(type:String, value:* = null):void {			if (_callback != null) _callback(type, value);			//dispatchEvent(new WWEvent(type, value));		}				private function buildAPI():void {					}				private function dissolve(container:DisplayObjectContainer):int {			var total:int = 0;			if (!container) return 0;			while (container.numChildren) {				total += 1 + dissolve(container.removeChildAt(0) as DisplayObjectContainer);			}			return total;		}	}}