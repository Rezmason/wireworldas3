/*** Reader by Jeremy Sachs. November 8, 2009** Feel free to distribute the source, just try not to hand it off to some douchebag.* Keep this header here.** Please contact jeremysachs@rezmason.net prior to distributing modified versions of this class.*/package net.rezmason.net {		// IMPORT STATEMENTS	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.utils.ByteArray;	public class Reader {				// CLASS PROPERTIES		public static const PATH_ERROR:String = "pathError", LOAD_ERROR:String = "loadError";		public static const PATH_ERROR_EVENT:ErrorEvent = new ErrorEvent(PATH_ERROR);		private static const LOAD_ERROR_EVENT:ErrorEvent = new ErrorEvent(LOAD_ERROR);		private static const INSTANCE_ERROR:ArgumentError = new ArgumentError("Reader class cannot be instantiated.");		private static var initialized:Boolean = false;		private static var buddy:EventDispatcher = new EventDispatcher();		private static var urlLoader:URLLoader = new URLLoader, urlRequest:URLRequest = new URLRequest;				// CONSTRUCTOR		public function Reader():void {			throw INSTANCE_ERROR;		}				// GETTERS & SETTERS				public static function get data():String {			return urlLoader.data;		}				// PUBLIC METHODS				public static function load(__url:String):void {			initialize();						urlRequest.url = __url;			urlLoader.load(urlRequest);		}				public static function loadBytes(data:ByteArray):void {			initialize();			urlLoader.dataFormat = URLLoaderDataFormat.BINARY;			urlLoader.data = data;			urlLoader.dataFormat = URLLoaderDataFormat.TEXT;			buddy.dispatchEvent(new Event(Event.COMPLETE));						//urlLoader.loadBytes(data);		}				private static function initialize():void {			if (!initialized) {				urlLoader.dataFormat = URLLoaderDataFormat.TEXT;				urlLoader.addEventListener(Event.COMPLETE, proceed);				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, throwPathError);				urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, throwLoadError);				initialized = true;			}		}				public static function addEventListener(type:String, listener:Function, useCapture:Boolean = false, 												priority:int = 0, useWeakReference:Boolean = false):void {			urlLoader.addEventListener(type, listener, useCapture, priority, useWeakReference);			buddy.addEventListener(type, listener, useCapture, priority, useWeakReference);		}				public static function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void {			urlLoader.removeEventListener(type, listener, useCapture);			buddy.removeEventListener(type, listener, useCapture);		}				public static function hasEventListener(type:String):Boolean {			return urlLoader.hasEventListener(type) || buddy.hasEventListener(type);		}				// PRIVATE METHODS				private static function throwPathError(event:IOErrorEvent):void {			urlLoader.close();			PATH_ERROR_EVENT.text = "Cannot find file at " + urlRequest.url + " .";			buddy.dispatchEvent(PATH_ERROR_EVENT);		}				private static function throwLoadError(event:SecurityErrorEvent):void {			urlLoader.close();			LOAD_ERROR_EVENT.text = "Cannot load the file at " + urlRequest.url + " .";			buddy.dispatchEvent(LOAD_ERROR_EVENT);		}				private static function proceed(event:Event):void {			urlLoader.close();		}	}}